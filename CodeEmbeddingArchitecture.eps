%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1763.000000 251.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G4032) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1763 251
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1763 251
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /P put
dup 34 /a put
dup 35 /r put
dup 36 /l put
dup 37 /e put
dup 38 /space put
dup 39 /slash put
dup 40 /D put
dup 41 /i put
dup 42 /s put
dup 43 /t put
dup 44 /b put
dup 45 /u put
dup 46 /d put
dup 47 /F put
dup 48 /y put
dup 49 /m put
dup 50 /o put
dup 51 /n put
dup 52 /R put
dup 53 /c put
dup 54 /M put
dup 55 /p put
dup 56 /hyphen put
dup 57 /I put
dup 58 /S put
dup 59 /V put
dup 60 /C put
dup 61 /W put
dup 62 /k put
dup 63 /fl put
dup 64 /w put
dup 65 /g put
dup 66 /A put
dup 67 /x put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







2FB8000C2FBA0008001300032BB8000810303121112311140E0223222635112311141E0233323637331501EC5513263927313855112A443339541B020205FEDC233B2C183830015EFEAC2A45321B2D305200000000010011000002E50205000F003500B800012FB800052FB800092FB800002FB8000B2FBA000400000001111239BA000800000001111239BA000E000000011112393031211323032303230323032313331333130240A55874026C5D6802755EA65C6802690205FE5901A7FE5901A7FDFB019BFE6500010009000001FD0205000B002700B800072FB8000A2FB800012FB800042FBA000300010007111239BA0009000100071112393031130333371733033723072723CBC26790906DC8B266817C6D0110FEF0D6D60117EEB5B500010008FF3101EC020500160086B800142B00B800014558B800112F1BB9001100083E59B800014558B800152F1BB9001500083E59B800014558B800052F1BB9000500063E59BA000900050011111239B9000C0002F441110007000C0017000C0027000C0037000C0047000C0057000C0067000C0077000C00085D41050086000C0096000C00025DBA0014000500111112393031050E0323222627351E013332363F01033313331333010B0F1D232B1C0F1E0E0B1D0A1A230923CD609702915A452634210F04054E05071917570202FE5901A7000002000C000001C202D20003001B006BBA0007000400032BB8000710BA0003000000032BB8000310B8000710B8000AD0B8000410B80011DCB8000410B80018D0B8000310B8001DDC00B800012FB800052FBA0015000E00032BB8001510BA0019000400032BB8001910B8000410B80007D0B8001910B80009D03031011133110111331133352335343633321617352E012322061D012315016D55FEA1556464221F0B1A0B0C1F0C46495702CAFD3602CAFEF0FE4601BA4B48221803044A0404413F4D4B0000020037FF5B04A802FA000B00110023B800142BBB00060003000300182B00B800042FB800112FBB00090002000000182B3031372226351133111416332115050901370901F75E62622E30034EFEA20136FECA42017FFE8276606101C3FE3D30345DD7010401004BFEB5FEB80001000000010000062A4FC55F0F3CF5011103E800000000B643600000000000D7C23C38FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000002501F400330116000001850032014DFFEF0288FFFA02D2002B02C0004E023E004E01030052036700500288004E02AD004E0288002502630000039E000C0219002402510043021900240251002402190024023E002400DE00450207004500DE004503550040022C0040023E002402510043014D003D01F4001F013B0009022C0040
02F600110206000901F400080206000C04BE0037000000480048005A007000A0010E017601A201BC0206026E02FE039203B203EC04F6058E0600069E070607B807E20814082E08C8091009B00A480A760B1A0B6C0BBC0BF60C220C8C0CEE0D240001000000250096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 37 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/slash 3 def
/A 4 def
/C 5 def
/D 6 def
/F 7 def
/I 8 def
/M 9 def
/P 10 def
/R 11 def
/S 12 def
/V 13 def
/W 14 def
/a 15 def
/b 16 def
/c 17 def
/d 18 def
/e 19 def
/g 20 def
/i 21 def
/k 22 def
/l 23 def
/m 24 def
/n 25 def
/o 26 def
/p 27 def
/r 28 def
/s 29 def
/t 30 def
/u 31 def
/w 32 def
/x 33 def
/y 34 def
/fl 35 def
/uni2B91 36 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec

C473FC05EF14CD92B6EC23D2606442D6B7218CC7FA350581A266AD4F63A57537179E6322E863239B98579D45B1EBBAD10B8E23F3CB211E2A67F9BBE9621139AE21210B3902E606D65952702C38B83943FABE6942381B2DE19E64ACBA7B9F45EAF97E5D0EF9AC53918E1FD38713D8403C382D41CA93D0433AA62DC53A7DF5C9C3D13BACC3EC969C71BCB2BB1FC70FC2BC9260A76780E3246D84FB82574251EF02C2ADE5442F285AE9152148D79A40CD4BCFF3C6ECBEF792308B9F77BA887A1E309A41C40DCA5D867D072CEE3081D1D3B3555A4E37FCC33CAB66A5B040ACFB7BF2C7F5A5698C7747004E65D534E9A226FC6180997B9A2FF18FD82BB3F4D2D987F9D3262A3ABA100602BBC2CCD3814BBA7A0803410B4C166D8654C819A4FFCA43F362B28722698EA5C992EB3E995EF7C9F3DA100A48EAB8E51164513F7DE3C9B77E655CE67A7F28CB8C28A4BAF8C39164038419C51AEA991855A078A602540C9CDD40501E4A9D02FCA83EECCF7238FBF6685A77BB58CC68342336B9710210D29D99093BE9365E09636797AD9D4B676058687582E2F1408AAD59585C540A2A180AF09672A5F1C9BD226EEF5676F8B07F3BB0C97E0F448AE5E657D8CD65066D414EE1BBAFFD07DBED5CDE374226E24B33E20BA2679316C594B11CCA179CDFEC6D486998ABA33D8535F43D3D4BF715C60C962CE0CBBB712100B599CA549921426AAA4044840340257E702268F6F5FD59362E80F37C5B1BD456617DC36722AF9DC32C5ADAA497F3F9C55BC756924B85A85EAB8F054F5043CC7735DE3FD5B3FFE049B28853AD84B2EA553DAB64E9DA17CB53E85070E0EDA81B79C1BDE73D2606CAC216DD3CD773427C909D5768888DA6EF08340182F66B49EFE2F8DAAAEAD5A9F8BA185585FDA092F996387616CBA72983B752EAE96832276C3C1527938E67CEF25ACD2C10CEEF17913E5B4F44521996731D37425F1285B9E0EF3A740DDC569171BD293B456C1E90C1B8AEC868A52C5EDA76735E158E20A5CEDC6BA6ADE94E708E827DE484A6A564287CC117AE611E0DE7A2F9FBD39F536F22780EE5BC01C7C8B9AED19F4E09AA2A280334EA6AD88E440C6A5F9F526432A5CB3D9EF51297E88713D8357086A17764C736949A012D0F676852C4BE2A14DB4C963084E9B5F2A02B665F691ED2E34AFD69CC25575C2B63A3B7B4624BDF6B486403344DE83050492D0498BDD84F3A9C3BA9581F1153558B612CF8A3112C9EBF8267C16C4831A5E992AEE15D250F03CC3BEF908DC5BECBAD0D4EAA19514BDD336E552F6BFB002B497E3FFA8CB73BD0146016B3C908B5A3A57A943372902B38DB8629F1E1E460F6C682699D9D4883BA019861BA75CFBD68B6CCE05B367EB20416FE1E8CE2EDC78E783A02C82D147CF0A4245E67318C0362D194956C7B23DC11960DACB3578F77DF058065B0EA24
68BADBC8CB842C8FB208B721D38BEFBA73A82CE4ED5811C889E06AD6681BA1D627BADF5A4FA35F96B389B78F344B9C4DE26EC39ECCC0529DC32D8477FE88830F6C22B786235E94275738206D8AF57D1987B1F4D6D83207CCBC27F7614C1B68A09CE4EFA891F74251E24FC28E9B384F9A599A49404AB551BFA72F08D0CD852551D7E75BD975BF23E960C7DA026442A5D2A487E824045710265962411C3377A6B9ACC6BB82B5E41D267AB987F288468046D89594096299253D76B2C37C46D4919437864FACCC56A1E886F4282C7A1E9701A0630B8F231950C22A9B25662B6B97EEA16EFF4127FFD14B53879624D61C0F6CB2C98E5639016E7DAF2CCE6C0112B2F7425F3D24AC966B2F4A1D8437FB00572FEA77A0C3EA3D9820EE9C14EAF18C6984084B4A04CAABDE37E9EAFEF780EA4EB2DFAB1CA69DEC52C7FFD84A97B06763AB7F5D9B4DCDF4E4ED6BF8D1B12A45D0EC540E1C7DBAC499E0108B39CC4A1CA3488760D323E28CE4F2D822F1162A8317EDBEC0A713E3322688115530CD970E03659593152942BE3FE5D815FDA74D7206B2E454C39C334433CC2E667D3F04A1EEF673475116F0778082D21E9EF0CC5D300D26C6C3EC614D27038674277B0E9D05AD474753752B542550C5CD85AFB922A0B0CBA3D9E78202E2E64672717D650BA94DFC090DC28F7152E3912BA084BA75BB7D228199982A9D1A6CBBF603BD46DD634FCA58979E3FAD34D02F536E4C37D83C8733AB9A3A62242587B5042FD7EFFFAC25D7B5398BE1D9DFC6C2EA7D0546E6CEF14218B2F0370A2CBA9F419C8EF1F9DF79CA3897ECEB2F90235EE76E11A18AE94DB0EEC9F98EE9A274BF81644C45F59B26DE8BEB6251CFF3F3EBCE1D26C6F4B89D5B6CF4524252766930CD87423B193AF4F716836C96857221E673253289253FA9DC4CF61991E2D32C1EA59E8BAA2519B8CD13C76991F9E1AD3E3AEF49D1BE230724414361F476727B8969981A47E862DC1B2C4DC125ABCB4688178E6E67997042A26CBE383F47D365CA38AF914E245E5603A76D4E76DB2A4E3C332160230B6764AF23A965B123315B45AC6020236AF7EC8AA4ED5F7CE28F92EA85782077A5A18773C91334AB880905DFE69CC4F1D354104997CDE4E8E682DB70BE09C355CADB9A2C9BE63085B941734C690B189A26D284F085D2FC7D5268BAF27C031D8A4CEAD5117A2E10D4F551EDA1D7C472D83940D6D8C2295AFB0D33DDC90DCAFD4154229740644AF99176089E89BA7C1A522EFBDFE0C2E87235AF0A9375AC1143259E2E8E600D9CAF44508B050FBC3A6EEAAB730859A5D0C2DAD56F43F1A924CD93D1F0992C7F43837E90D00E03C6C5E0080742A2F23DB5BE1477B0FEA95A9577041CF680850EEFCF6A980B7A7F205A6988F8FC5B439E0C6CE94312427AEC899529EC32247C75EA2A999BB6A11EF81E63AAE7FAFD

B9550450E47BF681B152A132371888D78C3E5DAAF9C54BC90CB66A32BCE83197E70D7E2970C8F26EEBF07D3A28AA8686D4906E6AA2D6B71C626C5BED60CC6930AE3FC3E98D6A33E4B22528F9A93EF06CFADA7E7C64D70421C8FF4F754C6DD108470F2A1E1DFD211E13E62858CAF74564AB9022990E2B6875AF4BCFAF31372E1B1D788391BBEFBC7D92D20B1FFC152CF51A25E5339FF97DB32B93F628FE2E45F4B345FA657478754A756BCC1C5F96D5E511AEAB21F5CEECFB086A70CF50BC6ACB59B8A1BE285590A332C818B785F01CF7DB35CBDA7D22ADBDC77320494E428CA6A1F391007EC8B9614610C7416929F02CCF68275993678552933B9491AABC55A187993299BBA25BDDCD0E0ED0D7B8A336FA65F40A5DB0387D6C330487A0974B61E49AA00596DAD14463C577726C4A1EC92DCBF973531F3EC132E6F83FCA411F8F422215C3BA495CBCD113E4823F06E4A7D2E74393DAEAE17A4D8EF2A70F65A79BAAA9F4F98940394C73EC83AA7C1FFD0180952391D23D2371D53D29279F5702CEFABFEC310BC864568528A5BECD7943BE7425B0FA4737BD6A946D67A8D6E7F47EB10B97F154A9C2DCA7E6EFFBF79446E51877A59EF8D754B6733485442C19D3F03B010A16A076F4710A2A94B811F17D65795DD59758656FBE4F25925244349D2F2F92BD6312464809E42DA23B2088FE4E01D843E7492F9621D05C4A8B94C6E1C5A2CCB157B959391AF7451BFAA5EF04FCEAE0E60F26731365E4A53E5C381EBF035A3E9AB9733C354C3795455DA2CC0BC3AC435E3D1866D3AD912E5A56F48276193742A30E30F49C4B5C046FA8BF4044087DAFAC65286AAEC637D0DDFD8D764487E6D1FD05AFBD6320DC300827FDB1A13144EC2B91571F13DD7C54D6F3915F8A32BF53A584DE35BBB1F94382EAE9D7BF920051321E2720DD7C5DB71A735BA048480C903F8F73BEF0D9CE06FEC80AF059269EE0C75FD06BBAD2AE4DF70559208997175F0EEE4B772F2FA70C7AE6BDCFAE0466FD5400942442A642DE01C89BB63ACE21140A7D881A77E83B19AC2988617FEBD98339470EDEB95033128445F5D26169C9C06BDB995A29D97155783EF39D6A4D59CB69B998E51B66A8403F0274351F1F538037C065EE4DDDEAFEA0111F0644CE535F8936E9095D8B291B9B9BAEE29DD1A99C2AD5054A4DA6A447E0B5BD3AFF52B7E724EE213BEC4C4CBC3EEFD629FFF78063C22ADBCD228C8E80E096B1BB4AEBA3DFB4D724088D479C24AEF1DA09210F3280F9AB990565D885F65735B6242F2B154121499683D6EDDB60D5939B9E159519548AF98C905CF09C5E838576F8F7F9C297FD440B0ACDAC14B2BD450EB4413EAD3E4968531B880B2359F11AE8801BDC2A592FB6681A7F8BA6CD1C801E74FEB36A29BAAA7C12D3A94A35EEB65B1904787E413302250ACE3933F535453F653FD2
6C12275A62145FD72E6B0C31183A992F90BC190C7DB69B1323961E84C82E500E1DDD04E7AEAFEEC76676E131FF2BF343BB376382B954CA8A337AF2B6BC340814F6E7D20D61F2D81E106E22603A9CE486438812AB37CE86EFD166C72E2B1FC296C170559FB0B9EAAE1CDDCCC03B26006ECEA3A23624920058313753A9B6A1DFD8258D84E33AEC5F9028C6995479592464BAE1ADCADF35EEB25A0A56B584BFA47F5BB30AA64C18581C45FA5DEF569EF721653F3ACEAE41A88A08800223C8E3EA0DDDB640ED1D396ECB210E56B9CF91E4F5153E4B2037F8A3991963D222D3CA44622F2B19311AB6979B0883EDC2BE0895337FFCB213D7B1EC05B3EC7266901E6DEA0B9A17D0258F0314B2BB12D06902D4D716EC1C974EEA0ECA6E863BED6342E0BB958BD9671C9FD0E16A3AD035BD3731C0F38ED673A975FD7AA8AEBD77F1FDF68DDB74C8F0898F31141037E80F8D3F908B94BEBD9B9B042CAF47BB329F5C1CF2DBD19D3EC924456E73B817C344299BB2B3DABE066C3ADAFBFA05F34B2F2FDA0E268843E94228717D6B334B6BDBAFBE417C1F33CEBA5E0AD44C58DF96E5DF798B8FDC1FFBB22E27109EE97174DA3C1D867CB08230A4FEC71F85882671F59B88E9C6EA2F2D53D24661483C7B271B2D8169A1F86B34F0F7DC947585B1EAD0835EAC7441128BD93E2193870B081A17CCB0579343733A277B1C5049E76D915B5BE380FDAD6CE6CAB7998EAD15C0CBCF2B0623DA2283F0ECA92C362D3E8B7DEE19E2CFC2DA26BC9ACBCB9A176412389E32899811132013BD928E5621F1A7585008A1DF59904CC687B60E892E1E5D4DE4AFB0DA944D93324754C127F8D23EAA060B3706A3FF8A1B9B792221A075D84F1A0FBBBC490C1D8A46B5B41EA3A66D717CCD712DBAB00ABDD70C6436594724B3A0833DBC2C281A1F0384AD2AF9D906C0E327FC5A5726E57ED7DCC090685B07654AAD5BB454F31E27D0ADED44BE53C582BE8A50620E5DF030B295B064F63E5C548630891FD95E4CE3A809C051345ACA853CF696DEB5AFE80FBD097230FD62D1B7B95BEC93E19737A6B88D3149FAAEBA178288F8BDDB4DA4B6E8DDE9BB43953C1773C187A072018E5F759D644C283831CF8A183810813397622BF53C8A00495E6D25B8609F0CD77D45F800DCF8CB656088AF80B2AD265635E6E6FC868A8AE4C57F094D97D02C9D61DE6A1CE693A07F64A11B0070B2128AC4E1D488B018A44B6130A6EB37C368F96F2322E593B52666BF51E7786948DC22E72F4C14A07455350D13F8F01B68B436E3993CDECACB71A60A19130B9CC2AF8E9BE122B5BD086509B374C8761FD3B45C8022948207DDE0C6DD1DF1C216F99EDDBAB8FACE9FA88415F655FC1A087023B26BA4EE63547BDDB8945BB3C43440679F18E7F076
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 1763 251 rc
0 251 m
1763 251 l
1763 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-2643.7644 2354.7102 m
4403.9404 2354.7102 l
4403.9404 -2100.7351 l
-2643.7644 -2100.7351 l
h
-2643.7644 2354.7102 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-300 3 m
-50 3 l
-50 253 l
-300 253 l
h
-300 3 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 125.5 125.5 cm
/F1.1[ 25 0 0 -25 0 0]sf
-112.9625 -96 m
(!"#"$$%$&'&\(\)*+#\),-+%.&)[ 16.200000 13.425000 8.325000 13.425000 5.550000 5.550000 13.425000 5.550000 6.950000 8.325000 6.950000 17.600000 5.550000 12.500000 7.875000 8.325000 5.550000 14.825000 13.900000 7.875000 13.425000 14.825000 0.000000 ] xS
-59.5 -66.300003 m
(/\)$%*0*+%1)[ 14.350000 5.550000 5.550000 13.425000 12.500000 12.500000 12.500000 7.875000 13.425000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
51.788166 135.11539 m
113.81107 135.11539 l
113.81107 36.699097 l
51.788166 36.699097 l
h
51.788166 135.11539 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-248.71184 118.38461 m
-186.68893 118.38461 l
-186.68893 216.8009 l
-248.71184 216.8009 l
h
-248.71184 118.38461 m
S
0 i
1 1 1 sc
CM
66.101143 138.50905 m
128.12404 138.50905 l
128.12404 40.092762 l
66.101143 40.092762 l
h
66.101143 138.50905 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-234.39885 114.99095 m
-172.37596 114.99095 l
-172.37596 213.40724 l
-234.39885 213.40724 l
h
-234.39885 114.99095 m
S
0 i
1 1 1 sc
CM
80.414124 141.90271 m
142.43703 141.90271 l
142.43703 43.486423 l
80.414124 43.486423 l
h
80.414124 141.90271 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-220.08588 111.59728 m
-158.06297 111.59728 l
-158.06297 210.01358 l
-220.08588 210.01358 l
h
-220.08588 111.59728 m
S
0 i
1 1 1 sc
CM
94.727097 145.29639 m
156.75 145.29639 l
156.75 46.880089 l
94.727097 46.880089 l
h
94.727097 145.29639 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-205.7729 108.20362 m
-143.75 108.20362 l
-143.75 206.6199 l
-205.7729 206.6199 l
h
-205.7729 108.20362 m
S
0 i
1 1 1 sc
CM
108.08588 148.69005 m
170.10878 148.69005 l
170.10878 50.273754 l
108.08588 50.273754 l
h
108.08588 148.69005 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-192.41412 104.80995 m
-130.39122 104.80995 l
-130.39122 203.22624 l
-192.41412 203.22624 l
h
-192.41412 104.80995 m
S
0 i
1 1 1 sc
CM
122.39886 152.08371 m
184.42175 152.08371 l
184.42175 53.667419 l
122.39886 53.667419 l
h
122.39886 152.08371 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-178.10115 101.41629 m
-116.07825 101.41629 l
-116.07825 199.83258 l
-178.10115 199.83258 l
h
-178.10115 101.41629 m
S
0 i
1 1 1 sc
CM
136.71184 155.47737 m
198.73473 155.47737 l
198.73473 57.061085 l
136.71184 57.061085 l
h
136.71184 155.47737 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-163.78816 98.022621 m
-101.76527 98.022621 l
-101.76527 196.43892 l
-163.78816 196.43892 l
h
-163.78816 98.022621 m
S
0 i
1 1 1 sc
CM
151.02481 158.87105 m
213.04771 158.87105 l
213.04771 60.45475 l
151.02481 60.45475 l
h
151.02481 158.87105 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-149.47519 94.62896 m
-87.452293 94.62896 l
-87.452293 193.04524 l
-149.47519 193.04524 l
h
-149.47519 94.62896 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 182.03625 109.6629 cm
/F1.1[ 10 0 0 -10 0 0]sf
-24.26 -8.4199982 m
(!"#+\)+\)23%.&)[ 6.480000 5.370000 3.330000 3.150000 2.220000 3.150000 2.220000 5.740000 5.560000 5.370000 5.930000 0.000000 ] xS
-15.65 3.8600006 m
(!"+\)%3+&)[ 6.480000 5.370000 3.150000 2.220000 5.370000 5.560000 3.150000 0.000000 ] xS
-18.705 16.139999 m
(4%52#.*)[ 6.850000 5.370000 5.370000 5.740000 3.150000 5.930000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
606 3 m
877 3 l
877 253 l
606 253 l
h
606 3 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 1042 125.5 cm
/F1.1[ 35 0 0 -35 0 0]sf
-102.1125 -87 m
(6"784%.-5%)[ 30.485000 18.795000 20.755000 13.615000 23.975000 18.795000 20.755000 19.460000 18.795000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
1191 3 m
1462 3 l
1462 253 l
1191 253 l
h
1191 3 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 1627 125.5 cm
-81.672501 -87 m
(!!69&:;\()[ 22.680000 22.680000 30.485000 9.065000 9.730000 22.680000 21.385000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
313.5 3 m
584.5 3 l
584.5 253 l
313.5 253 l
h
313.5 3 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 749.5 125.5 cm
/F1.1[ 25 0 0 -25 0 0]sf
-112.9625 -96 m
(!"#"$$%$&'&\(\)*+#\),-+%.&)[ 16.200000 13.425000 8.325000 13.425000 5.550000 5.550000 13.425000 5.550000 6.950000 8.325000 6.950000 17.600000 5.550000 12.500000 7.875000 8.325000 5.550000 14.825000 13.900000 7.875000 13.425000 14.825000 0.000000 ] xS
-59.5 -66.300003 m
(/\)$%*0*+%1)[ 14.350000 5.550000 5.550000 13.425000 12.500000 12.500000 12.500000 7.875000 13.425000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
686.5 132.74434 m
748.52289 132.74434 l
748.52289 34.328053 l
686.5 34.328053 l
h
686.5 132.74434 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
386 120.75565 m
448.02289 120.75565 l
448.02289 219.17195 l
386 219.17195 l
h
386 120.75565 m
S
0 i
1 1 1 sc
CM
700.81299 136.13802 m
762.83588 136.13802 l
762.83588 37.721718 l
700.81299 37.721718 l
h
700.81299 136.13802 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
400.31299 117.36199 m
462.33588 117.36199 l
462.33588 215.77827 l
400.31299 215.77827 l
h
400.31299 117.36199 m
S
0 i
1 1 1 sc
CM
715.12598 139.53168 m
777.14886 139.53168 l
777.14886 41.115383 l
715.12598 41.115383 l
h
715.12598 139.53168 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
414.62595 113.96832 m
476.64886 113.96832 l
476.64886 212.38461 l
414.62595 212.38461 l
h
414.62595 113.96832 m
S
0 i
1 1 1 sc
CM
729.4389 142.92534 m
791.46185 142.92534 l
791.46185 44.509048 l
729.4389 44.509048 l
h
729.4389 142.92534 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
428.93893 110.57466 m
490.96182 110.57466 l
490.96182 208.99095 l
428.93893 208.99095 l
h
428.93893 110.57466 m
S
0 i
1 1 1 sc
CM
742.79773 146.319 m
804.82062 146.319 l
804.82062 47.902714 l
742.79773 47.902714 l
h
742.79773 146.319 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
442.2977 107.18099 m
504.32062 107.18099 l
504.32062 205.59729 l
442.2977 205.59729 l
h
442.2977 107.18099 m
S
0 i
1 1 1 sc
CM
757.11066 149.71268 m
819.13361 149.71268 l
819.13361 51.296379 l
757.11066 51.296379 l
h
757.11066 149.71268 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
456.61069 103.78733 m
518.63361 103.78733 l
518.63361 202.20361 l
456.61069 202.20361 l
h
456.61069 103.78733 m
S
0 i
1 1 1 sc
CM
771.42365 153.10634 m
833.44659 153.10634 l
833.44659 54.690044 l
771.42365 54.690044 l
h
771.42365 153.10634 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
470.92368 100.39366 m
532.94659 100.39366 l
532.94659 198.80995 l
470.92368 198.80995 l
h
470.92368 100.39366 m
S
0 i
1 1 1 sc
CM
785.73663 156.5 m
847.75952 156.5 l
847.75952 58.08371 l
785.73663 58.08371 l
h
785.73663 156.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
485.23663 97 m
547.25952 97 l
547.25952 195.41629 l
485.23663 195.41629 l
h
485.23663 97 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 816.74811 107.29185 cm
/F1.1[ 15 0 0 -15 0 0]sf
-13.05 -3.4199982 m
(!"\)#&)[ 9.720000 8.055000 3.330000 4.995000 0.000000 ] xS
-24.172501 14 m
(<2-3+*)[ 10.830000 8.610000 8.340000 8.340000 4.725000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-45 3 m
304 3 l
304 253 l
-45 253 l
h
-45 3 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 430 125.5 cm
/F1.1[ 25 0 0 -25 0 0]sf
-104.6 -96 m
(=2#>?2@&6"3"A%#)[ 21.725000 14.350000 8.325000 12.975000 12.950000 14.350000 18.950000 6.950000 21.775000 13.425000 13.900000 13.425000 14.350000 13.425000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
12 147 m
142.52245 147 l
142.52245 188.42911 l
12 188.42911 l
h
12 147 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 377.76123 85.785446 cm
/F1.1[ 15 0 0 -15 0 0]sf
-52.5075 5.2900009 m
(%3-1%#"+%!"\)#*)[ 8.055000 8.340000 8.340000 12.795000 8.055000 4.995000 8.055000 4.725000 8.055000 9.720000 8.055000 3.330000 4.995000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
12 194.52162 m
142.52245 194.52162 l
142.52245 235.95074 l
12 235.95074 l
h
12 194.52162 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 377.76123 38.263817 cm
-52.5075 5.2900009 m
(%3-1%#"+%!"\)#*)[ 8.055000 8.340000 8.340000 12.795000 8.055000 4.995000 8.055000 4.725000 8.055000 9.720000 8.055000 3.330000 4.995000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
152.47755 148.82776 m
283 148.82776 l
283 190.25687 l
152.47755 190.25687 l
h
152.47755 148.82776 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 518.23877 83.957687 cm
-52.5075 5.2900009 m
(%3-1%#"+%!"\)#*)[ 8.055000 8.340000 8.340000 12.795000 8.055000 4.995000 8.055000 4.725000 8.055000 9.720000 8.055000 3.330000 4.995000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
152.47755 194.52162 m
283 194.52162 l
283 235.95074 l
152.47755 235.95074 l
h
152.47755 194.52162 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 518.23877 38.263817 cm
-52.5075 5.2900009 m
(%3-1%#"+%!"\)#*)[ 8.055000 8.340000 8.340000 12.795000 8.055000 4.995000 8.055000 4.725000 8.055000 9.720000 8.055000 3.330000 4.995000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
903 3 m
1161 3 l
1161 253 l
903 253 l
h
903 3 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 1332.5 125.5 cm
/F1.1[ 25 0 0 -25 0 0]sf
-112.9625 -96 m
(!"#"$$%$&'&\(\)*+#\),-+%.&)[ 16.200000 13.425000 8.325000 13.425000 5.550000 5.550000 13.425000 5.550000 6.950000 8.325000 6.950000 17.600000 5.550000 12.500000 7.875000 8.325000 5.550000 14.825000 13.900000 7.875000 13.425000 14.825000 0.000000 ] xS
-59.5 -66.300003 m
(/\)$%*0*+%1)[ 14.350000 5.550000 5.550000 13.425000 12.500000 12.500000 12.500000 7.875000 13.425000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
1277.355 133.98416 m
1387.645 133.98416 l
1387.645 35.567875 l
1277.355 35.567875 l
h
1277.355 133.98416 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
976.85498 119.51584 m
1087.145 119.51584 l
1087.145 217.93213 l
976.85498 217.93213 l
h
976.85498 119.51584 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 1332.5 84.776016 cm
/F1.1[ 15 0 0 -15 0 0]sf
-39.029999 -12.129997 m
(BAA#%A"+%.&)[ 9.720000 8.610000 8.610000 4.725000 8.055000 8.610000 8.055000 4.725000 8.055000 8.895000 0.000000 ] xS
-47.362499 5.2900009 m
(<2255-##%35%&)[ 10.830000 8.610000 8.610000 8.055000 8.055000 8.340000 4.995000 4.725000 8.055000 8.340000 8.055000 8.055000 0.000000 ] xS
-20.969999 22.709999 m
(6"+#\)C)[ 13.065000 8.055000 4.725000 4.995000 3.330000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
243.5 0.5 m
243.5 250.5 l
273.07812 250.5 l
273.07812 250.5 l
313.5 125.5 l
273.07812 0.5 l
273.07812 0.5 l
h
243.5 0.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
-57 253 m
-57 3 l
-27.421875 3 l
-27.421875 3 l
13 128 l
-27.421875 253 l
-27.421875 253 l
h
-57 253 m
S
0 i
1 1 1 sc
CM
594.5 0.5 m
594.5 250.5 l
624.07812 250.5 l
624.07812 250.5 l
664.5 125.5 l
624.07812 0.5 l
624.07812 0.5 l
h
594.5 0.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
294 253 m
294 3 l
323.57812 3 l
323.57812 3 l
364 128 l
323.57812 253 l
323.57812 253 l
h
294 253 m
S
0 i
1 1 1 sc
CM
877.5 0.5 m
877.5 250.5 l
907.07812 250.5 l
907.07812 250.5 l
947.5 125.5 l
907.07812 0.5 l
907.07812 0.5 l
h
877.5 0.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
577 253 m
577 3 l
606.57812 3 l
606.57812 3 l
647 128 l
606.57812 253 l
606.57812 253 l
h
577 253 m
S
0 i
1 1 1 sc
CM
1177.5 0.5 m
1177.5 250.5 l
1207.0781 250.5 l
1207.0781 250.5 l
1247.5 125.5 l
1207.0781 0.5 l
1207.0781 0.5 l
h
1177.5 0.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
877 253 m
877 3 l
906.57812 3 l
906.57812 3 l
947 128 l
906.57812 253 l
906.57812 253 l
h
877 253 m
S
0 i
1 1 1 sc
CM
1461.5 0.5 m
1461.5 250.5 l
1491.0781 250.5 l
1491.0781 250.5 l
1531.5 125.5 l
1491.0781 0.5 l
1491.0781 0.5 l
h
1461.5 0.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 300.5 253.5 cm
1161 253 m
1161 3 l
1190.5781 3 l
1190.5781 3 l
1231 128 l
1190.5781 253 l
1190.5781 253 l
h
1161 253 m
S
ep
end
%%Trailer
%%EOF
